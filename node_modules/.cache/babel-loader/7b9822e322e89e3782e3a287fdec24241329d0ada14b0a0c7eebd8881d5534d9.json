{"ast":null,"code":"var _jsxFileName = \"/Users/zeta/Documents/years_web/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\n\n// 创建认证上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 创建认证提供者组件\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 从localStorage获取存储的用户信息\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (token && storedUser) {\n        // 设置axios默认headers\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        setUser(JSON.parse(storedUser));\n        try {\n          // 验证token有效性\n          const response = await axios.get('/api/auth/me');\n          setUser(response.data);\n        } catch (error) {\n          // token无效，清除本地存储\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          delete axios.defaults.headers.common['Authorization'];\n          setUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n\n  // 登录函数\n  const login = (userData, token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    setUser(userData);\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  // 提供给子组件的上下文值\n  const contextValue = {\n    user,\n    loading,\n    login,\n    logout,\n    isAdmin,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义hook，方便在组件中使用认证上下文\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth必须在AuthProvider内部使用');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","initAuth","token","localStorage","getItem","storedUser","defaults","headers","common","JSON","parse","response","get","data","error","removeItem","login","userData","setItem","stringify","logout","isAdmin","role","contextValue","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/zeta/Documents/years_web/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\n\n// 创建认证上下文\nconst AuthContext = createContext();\n\n// 创建认证提供者组件\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 从localStorage获取存储的用户信息\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n\n      if (token && storedUser) {\n        // 设置axios默认headers\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        setUser(JSON.parse(storedUser));\n        \n        try {\n          // 验证token有效性\n          const response = await axios.get('/api/auth/me');\n          setUser(response.data);\n        } catch (error) {\n          // token无效，清除本地存储\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          delete axios.defaults.headers.common['Authorization'];\n          setUser(null);\n        }\n      }\n      \n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  // 登录函数\n  const login = (userData, token) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    setUser(userData);\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n\n  // 检查用户是否为管理员\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  // 提供给子组件的上下文值\n  const contextValue = {\n    user,\n    loading,\n    login,\n    logout,\n    isAdmin,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// 自定义hook，方便在组件中使用认证上下文\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth必须在AuthProvider内部使用');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}