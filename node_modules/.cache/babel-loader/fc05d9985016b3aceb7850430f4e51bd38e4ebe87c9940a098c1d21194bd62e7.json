{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器，为请求添加token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器，处理401错误\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // 清除本地存储的认证信息\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // 可以在这里添加重定向到登录页面的逻辑\n    // window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 用户认证相关API\nexport const registerUser = async userData => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  } catch (error) {\n    console.error('用户注册失败:', error);\n    throw error;\n  }\n};\nexport const loginUser = async credentials => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  } catch (error) {\n    console.error('用户登录失败:', error);\n    throw error;\n  }\n};\nexport const getCurrentUser = async () => {\n  try {\n    const response = await api.get('/auth/me');\n    return response.data;\n  } catch (error) {\n    console.error('获取当前用户信息失败:', error);\n    throw error;\n  }\n};\nexport const fetchAllPeople = async () => {\n  try {\n    const response = await api.get('/people');\n    return response.data;\n  } catch (error) {\n    console.error('获取人物列表失败:', error);\n    throw error;\n  }\n};\nexport const searchPeople = async query => {\n  try {\n    const response = await api.get(`/people/search`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('搜索人物失败:', error);\n    throw error;\n  }\n};\nexport const importPerson = async personData => {\n  try {\n    const response = await api.post('/people/import', personData);\n    return response.data;\n  } catch (error) {\n    console.error('导入人物数据失败:', error);\n    throw error;\n  }\n};\nexport const batchImportPeople = async peopleData => {\n  try {\n    const response = await api.post('/people/batch-import', peopleData);\n    return response.data;\n  } catch (error) {\n    console.error('批量导入人物数据失败:', error);\n    throw error;\n  }\n};\nexport const fetchPersonById = async id => {\n  try {\n    const response = await api.get(`/people/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取人物(ID: ${id})详情失败:`, error);\n    throw error;\n  }\n};\nexport const fetchEventsByYear = async year => {\n  try {\n    const response = await api.get(`/events/year/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取${year}年事件失败:`, error);\n    throw error;\n  }\n};\nexport const fetchEventsByAge = async age => {\n  try {\n    const response = await api.get(`/events/age/${age}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取${age}岁事件失败:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","registerUser","userData","post","data","console","loginUser","credentials","getCurrentUser","get","fetchAllPeople","searchPeople","query","params","q","importPerson","personData","batchImportPeople","peopleData","fetchPersonById","id","fetchEventsByYear","year","fetchEventsByAge","age"],"sources":["/Users/zeta/Documents/years_web/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器，为请求添加token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器，处理401错误\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // 清除本地存储的认证信息\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // 可以在这里添加重定向到登录页面的逻辑\n      // window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 用户认证相关API\nexport const registerUser = async (userData) => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  } catch (error) {\n    console.error('用户注册失败:', error);\n    throw error;\n  }\n};\n\nexport const loginUser = async (credentials) => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  } catch (error) {\n    console.error('用户登录失败:', error);\n    throw error;\n  }\n};\n\nexport const getCurrentUser = async () => {\n  try {\n    const response = await api.get('/auth/me');\n    return response.data;\n  } catch (error) {\n    console.error('获取当前用户信息失败:', error);\n    throw error;\n  }\n};\n\nexport const fetchAllPeople = async () => {\n  try {\n    const response = await api.get('/people');\n    return response.data;\n  } catch (error) {\n    console.error('获取人物列表失败:', error);\n    throw error;\n  }\n};\n\nexport const searchPeople = async (query) => {\n  try {\n    const response = await api.get(`/people/search`, {\n      params: { q: query }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('搜索人物失败:', error);\n    throw error;\n  }\n};\n\nexport const importPerson = async (personData) => {\n  try {\n    const response = await api.post('/people/import', personData);\n    return response.data;\n  } catch (error) {\n    console.error('导入人物数据失败:', error);\n    throw error;\n  }\n};\n\nexport const batchImportPeople = async (peopleData) => {\n  try {\n    const response = await api.post('/people/batch-import', peopleData);\n    return response.data;\n  } catch (error) {\n    console.error('批量导入人物数据失败:', error);\n    throw error;\n  }\n};\n\nexport const fetchPersonById = async (id) => {\n  try {\n    const response = await api.get(`/people/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取人物(ID: ${id})详情失败:`, error);\n    throw error;\n  }\n};\n\nexport const fetchEventsByYear = async (year) => {\n  try {\n    const response = await api.get(`/events/year/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取${year}年事件失败:`, error);\n    throw error;\n  }\n};\n\nexport const fetchEventsByAge = async (age) => {\n  try {\n    const response = await api.get(`/events/age/${age}`);\n    return response.data;\n  } catch (error) {\n    console.error(`获取${age}岁事件失败:`, error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}